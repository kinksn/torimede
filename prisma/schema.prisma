// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("DIRECT_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Tag {
  id     String    @id @default(cuid())
  name   String    @unique @db.VarChar(100)
  posts  PostTag[]
  userId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostTag {
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String @map("tag_id")
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model Cute {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Post {
  id        String      @id @default(cuid())
  title     String      @db.VarChar(225)
  content   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tags      PostTag[]
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  cutes     Cute[]
  images    PostImage[]
}

model PostImage {
  id        String   @id @default(cuid())
  postId    String
  url       String
  alt       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String?   @unique
  emailVerified     DateTime? @map("email_verified")
  image             String?
  oAuthProfileImage String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  password          String?
  isAdmin           Boolean   @default(false)
  isFirstLogin      Boolean   @default(true)
  Post              Post[]
  Cute              Cute[]
  Tag               Tag[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
